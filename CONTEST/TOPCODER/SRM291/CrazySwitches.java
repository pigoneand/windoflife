
import java.util.LinkedList;
import java.util.Queue;

public class CrazySwitches
{
	class State
	{
		int s;
		int posi;
		State(int s, int posi)
		{
			this.s = s;
			this.posi = posi;
		}
	}
	
	void checkAndPush(boolean[][] visited, int[][] f, int s, int posi, int nf, Queue<State> q)
	{
		if (!visited[s][posi])
		{
			visited[s][posi] = true;
			f[s][posi] = nf;
			q.offer(new State(s, posi));
		}
	}
	
	public int minimumActions(int[] switches)
	{
		int N = switches.length;
		
		int[][] f = new int[1 << N][N];
		boolean[][] visited = new boolean[1 << N][N];
		
		Queue<State> q = new LinkedList<State>();
		q.offer(new State(1, 0));
		visited[1][0] = true;
		f[1][0] = 0;
		
		while (!q.isEmpty())
		{
			State now = q.poll();
			int nowf = f[now.s][now.posi];
					
			// try to move
			for (int i = 0; i < N; ++i) 
				if ((now.s & (1 << i)) != 0 && i != now.posi)
					checkAndPush(visited, f, now.s, i, nowf + 1, q);
					
			// try to light 
			for (int i = 0; i < N; ++i) 
				if (switches[i] == now.posi && i != now.posi)
					checkAndPush(visited, f, now.s ^ (1 << i), now.posi, nowf, q);
		}
		
		if (visited[1 << (N - 1)][N - 1]) return f[1 << (N - 1)][N - 1]; else return -1;
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print(p0[i]);
		}
		System.out.print("}");
		System.out.println("]");
		CrazySwitches obj;
		int answer;
		obj = new CrazySwitches();
		long startTime = System.currentTimeMillis();
		answer = obj.minimumActions(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		int[] p0;
		int p1;

		// ----- test 0 -----
		p0 = new int[]{1,0};
		p1 = 1;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = new int[]{0,1};
		p1 = -1;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = new int[]{1,2,0};
		p1 = 3;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = new int[]{4,4,3,0,5,2};
		p1 = 7;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------

		// ----- test 4 -----
		p0 = new int[]{7,11,1,12,6,3,0,2,6,0,0,5,9};
		p1 = 15;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
