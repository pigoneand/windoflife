import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;


public class DivisorInc
{
	public int countOperations(int N, int M)
	{
		Queue<Integer> q = new LinkedList<Integer>();
		
		int[] steps = new int[M + 1];
		Arrays.fill(steps, -1);
		
		steps[N] = 0;
		q.offer(N);
		
		while (q.size() > 0)
		{
			int now = q.poll();
			for (int i = 2; i * i <= now; ++i)
				if (now % i == 0) 
				{
					int next = now + i;
					if (next <= M && steps[next] == -1) 
					{
						steps[next] = steps[now] + 1;
						q.offer(next);
					}
					next = now + now / i;
					if (next <= M && steps[next] == -1) 
					{
						steps[next] = steps[now] + 1;
						q.offer(next);
					}
				}
		}
		
		return steps[M];
	}
	
	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1, boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
		System.out.println("]");
		DivisorInc obj;
		int answer;
		obj = new DivisorInc();
		long startTime = System.currentTimeMillis();
		answer = obj.countOperations(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}
	public static void main(String[] args) {
		boolean all_right;
		all_right = true;
		
		int p0;
		int p1;
		int p2;
		
		// ----- test 0 -----
		p0 = 4;
		p1 = 24;
		p2 = 5;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 1 -----
		p0 = 4;
		p1 = 576;
		p2 = 14;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 2 -----
		p0 = 8748;
		p1 = 83462;
		p2 = 10;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 3 -----
		p0 = 235;
		p1 = 98234;
		p2 = 21;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 4 -----
		p0 = 4;
		p1 = 99991;
		p2 = -1;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
		
		// ----- test 5 -----
		p0 = 82736;
		p1 = 82736;
		p2 = 0;
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------
		
		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
