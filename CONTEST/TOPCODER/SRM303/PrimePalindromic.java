import java.util.*;
import java.util.regex.*;
import java.text.*;
import java.math.*;

public class PrimePalindromic {
	// modifies c to next permutation or returns null if such permutation does
	// not exist
	private static Comparable[] nextPermutation(final Comparable[] c) {
		// 1. finds the largest k, that c[k] < c[k+1]
		int first = getFirst(c);
		if (first == -1)
			return null; // no greater permutation
		// 2. find last index toSwap, that c[k] < c[toSwap]
		int toSwap = c.length - 1;
		while (c[first].compareTo(c[toSwap]) >= 0)
			--toSwap;
		// 3. swap elements with indexes first and last
		swap(c, first++, toSwap);
		// 4. reverse sequence from k+1 to n (inclusive)
		toSwap = c.length - 1;
		while (first < toSwap)
			swap(c, first++, toSwap--);
		return c;
	}

	// finds the largest k, that c[k] < c[k+1]
	// if no such k exists (there is not greater permutation), return -1
	private static int getFirst(final Comparable[] c) {
		for (int i = c.length - 2; i >= 0; --i)
			if (c[i].compareTo(c[i + 1]) < 0)
				return i;
		return -1;
	}

	// swaps two elements (with indexes i and j) in array
	private static void swap(final Comparable[] c, final int i, final int j) {
		final Comparable tmp = c[i];
		c[i] = c[j];
		c[j] = tmp;
	}

	ArrayList<Integer> genPrimes(int N) {
		ArrayList<Integer> primes = new ArrayList<Integer>();

		boolean[] isPrime = new boolean[N + 1];
		Arrays.fill(isPrime, true);

		for (int i = 2; i <= N; ++i)
			if (isPrime[i]) {
				primes.add(i);
				for (int j = i + i; j <= N; j += i)
					isPrime[j] = false;
			}
		return primes;
	}
	
	boolean isPalindrome(Integer[] ps)
	{
		String s = "";
		for (Integer p : ps) s = s + p;
		String revS = new StringBuilder(s).reverse().toString();
		return revS.equals(s);
	}

	public int count(int A, int B) {
		ArrayList<Integer> primes = genPrimes(10000);
		int ans = 0;

		for (int i = A; i <= B; ++i) {
			int now = i;
			ArrayList<Integer> oddFactors = new ArrayList<Integer>();
			for (int p : primes) {
				int cnt = 0;
				while (now % p == 0) {
					cnt++;
					now /= p;
					oddFactors.add(p);
				}
			}

			//System.out.println(i + ":" + oddFactors);
			Integer[] fs = oddFactors.toArray(new Integer[0]);
			
			boolean isPalind = false;
			while (true)
			{
				if (isPalindrome(fs)) isPalind = true;
				fs = (Integer[]) nextPermutation(fs);
				if (fs == null) break;
				if (isPalind) break;
			}
			
			if (isPalind) ans++;
		}

		return ans;
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, int p0, int p1,
			boolean hasAnswer, int p2) {
		System.out.print("Test " + testNum + ": [" + p0 + "," + p1);
		System.out.println("]");
		PrimePalindromic obj;
		int answer;
		obj = new PrimePalindromic();
		long startTime = System.currentTimeMillis();
		answer = obj.count(p0, p1);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0
				+ " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p2);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p2;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		int p0;
		int p1;
		int p2;

		// ----- test 0 -----
		p0 = 2260;
		p1 = 2262;
		p2 = 1;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = 2;
		p1 = 9;
		p2 = 7;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = 2;
		p1 = 100;
		p2 = 36;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------

		if (all_right) {
			System.out
					.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
