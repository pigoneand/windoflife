
public class FourBears {
	void floyd(int[][] graph) {
		int N = graph.length;
		for (int k = 0; k < N; ++k)
			for (int i = 0; i < N; ++i)
				for (int j = 0; j < N; ++j)
					graph[i][j] = Math.min(graph[i][j], graph[i][k] + graph[k][j]);
	}

	int getBalance(String[] field, int x1, int y1, int x2, int y2) {
		int ret = 0;
		if (field[x1].charAt(y1) == '.')
			ret--;
		return ret;
	}

	public int clearPassages(String[] field) {
		final int INFI = 99999999;
		int R = field.length;
		int C = field[0].length();
		int[][] g = new int[R * C][R * C];
		for (int i = 0; i < R * C; ++i)
			for (int j = 0; j < R * C; ++j)
				g[i][j] = INFI;

		int[][] dir = { { -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 } };
		for (int x1 = 0; x1 < R; ++x1)
			for (int y1 = 0; y1 < C; ++y1) {
				int n1 = x1 * C + y1;
				g[n1][n1] = 0;
				if (y1 == 0 && field[x1].charAt(y1) == '.')
					continue;
				if (y1 == C - 1 && field[x1].charAt(y1) == '.')
					continue;

				for (int k = 0; k < 4; ++k) {
					int x2 = x1 + dir[k][0];
					int y2 = y1 + dir[k][1];
					if (x2 >= 0 && x2 < R && y2 >= 0 && y2 < C) {
						if (y2 == 0 && field[x2].charAt(y2) == '.')
							continue;
						if (y2 == C - 1 && field[x2].charAt(y2) == '.')
							continue;

						int n2 = x2 * C + y2;
						g[n1][n2] = 0;
						if (field[x2].charAt(y2) == '.')
							g[n1][n2] = 1;
					}
				}
			}

		floyd(g);

		int r1 = 0, r2 = 0, r3 = 0, r4 = 0;
		for (int i = 0; i < R; ++i)
			if (field[i].charAt(0) == 'B') {
				r1 = i;
				break;
			}
		for (int i = R - 1; i >= 0; --i)
			if (field[i].charAt(0) == 'B') {
				r2 = i;
				break;
			}
		for (int i = 0; i < R; ++i)
			if (field[i].charAt(C - 1) == 'B') {
				r3 = i;
				break;
			}
		for (int i = R - 1; i >= 0; --i)
			if (field[i].charAt(C - 1) == 'B') {
				r4 = i;
				break;
			}

		int ans = INFI;
		for (int x1 = 0; x1 < R; ++x1)
			for (int y1 = 1; y1 < C; ++y1)
				for (int x2 = 0; x2 < R; ++x2)
					for (int y2 = 0; y2 < C - 1; ++y2) {
						int m1 = x1 * C + y1;
						int m2 = x2 * C + y2;
						int dist1 = g[r1 * C][m1] + g[r2 * C][m1];
						int dist2 = g[m2][r3 * C + C - 1] + g[m2][r4 * C + C - 1];
						int dist3 = g[m1][m2];
						int nowdist = dist1 + dist2 + dist3 + getBalance(field, x1, y1, x2, y2);
						ans = Math.min(ans, nowdist);
					}
		
		for (int x1 = 0; x1 < R; ++x1)
			for (int y1 = 1; y1 < C; ++y1)
				for (int x2 = 0; x2 < R; ++x2)
					for (int y2 = 0; y2 < C - 1; ++y2) {
						int m1 = x1 * C + y1;
						int m2 = x2 * C + y2;
						int dist1 = g[r1 * C][m1] + g[r3 * C + C - 1][m1];
						int dist2 = g[m2][r2 * C] + g[m2][r4 * C + C - 1];
						int dist3 = g[m1][m2];
						int nowdist = dist1 + dist2 + dist3 + getBalance(field, x1, y1, x2, y2);
						ans = Math.min(ans, nowdist);
					}

		return ans;
	}

	// BEGIN KAWIGIEDIT TESTING
	// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
	private static boolean KawigiEdit_RunTest(int testNum, String[] p0, boolean hasAnswer, int p1) {
		System.out.print("Test " + testNum + ": [" + "{");
		for (int i = 0; p0.length > i; ++i) {
			if (i > 0) {
				System.out.print(",");
			}
			System.out.print("\"" + p0[i] + "\"");
		}
		System.out.print("}");
		System.out.println("]");
		FourBears obj;
		int answer;
		obj = new FourBears();
		long startTime = System.currentTimeMillis();
		answer = obj.clearPassages(p0);
		long endTime = System.currentTimeMillis();
		boolean res;
		res = true;
		System.out.println("Time: " + (endTime - startTime) / 1000.0 + " seconds");
		if (hasAnswer) {
			System.out.println("Desired answer:");
			System.out.println("\t" + p1);
		}
		System.out.println("Your answer:");
		System.out.println("\t" + answer);
		if (hasAnswer) {
			res = answer == p1;
		}
		if (!res) {
			System.out.println("DOESN'T MATCH!!!!");
		} else if ((endTime - startTime) / 1000.0 >= 2) {
			System.out.println("FAIL the timeout");
			res = false;
		} else if (hasAnswer) {
			System.out.println("Match :-)");
		} else {
			System.out.println("OK, but is it right?");
		}
		System.out.println("");
		return res;
	}

	public static void main(String[] args) {
		boolean all_right;
		all_right = true;

		String[] p0;
		int p1;

		// ----- test 0 -----
		p0 = new String[] { "B.X...............", "..X..XXXXXXXXXX..B", "B.X..X........X...", ".....X........X...",
				"..XXXX........X..B" };
		p1 = 7;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------

		// ----- test 1 -----
		p0 = new String[] { "..................", "B..........XXXX..B", "..........X.......", "....XXXXXX........",
				"..........XX......", "B............XX..B", ".................." };
		p1 = 15;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------

		// ----- test 2 -----
		p0 = new String[] { "B.B", "...", "B.B" };
		p1 = 3;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------

		// ----- test 3 -----
		p0 = new String[] { "..B", "B.B", "B.." };
		p1 = 1;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------

		// ----- test 4 -----
		p0 = new String[] { "B..................XX.................XX.XXX.....B",
				"...XXXXX.....XXXX......XXXXX.....XXXX..XXX.XXXX...",
				"............XX..................XX................",
				".......XXX........XX..X....XXX...........XXX......",
				"............XXX......X.XXX......XXX.XXX..X.XXX....",
				"....XXXX......XXX...X...XXXX......XXX.XXXX........",
				"B..XX..............XX............................B" };
		p1 = 28;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------

		if (all_right) {
			System.out.println("You're a stud (at least on the example cases)!");
		} else {
			System.out.println("Some of the test cases had errors.");
		}
	}
	// END KAWIGIEDIT TESTING
}
// Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
